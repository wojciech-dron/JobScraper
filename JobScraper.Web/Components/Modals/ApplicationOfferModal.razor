@using BlazorBootstrap
@using JobScraper.Models
@using JobScraper.Persistence
@using Microsoft.EntityFrameworkCore

<Modal @ref="_modal" Title="Offer application" Fullscreen="ModalFullscreen.Always">
    <BodyTemplate>
        <div class="row">
            <div class="col-md-3">
                <h4>Offer details</h4>
                <a href="@_jobOffer.OfferUrl" target="_blank">Offer page</a><br/>
                @if (!string.IsNullOrEmpty(_jobOffer.ApplyUrl))
                {
                    <a href="@_jobOffer.ApplyUrl" target="_blank">Apply page</a><br/>
                }
                <strong>Title:</strong> @_jobOffer.Title<br/>
                <strong>Company Name:</strong>
                <span>@(_jobOffer.CompanyName ?? "Not specified")</span><br/>
                @if (_alreadyAppliedToCompany)
                {
                    <span class="text text-danger">Already applied to this company.</span><br/>
                }
                <strong>Company offers count:</strong> @_companyOffersCount<br/>
                <strong>Location:</strong> @(_jobOffer.Location ?? "Not specified")<br/>
                <strong>Origin:</strong> @_jobOffer.Origin<br/>
                <strong>Published at:</strong> @(_jobOffer.PublishedAt?.ToString("dd-MM-yyyy"))<br/>
                <strong>Offer Keywords:</strong> @(string.Join(", ", _jobOffer.OfferKeywords))<br/>
                <strong>My Keywords:</strong> @(string.Join(", ", _jobOffer.MyKeywords))<br/>
                <strong>Salary:</strong> @($"{_jobOffer.SalaryMinMonth} - {_jobOffer.SalaryMaxMonth} {_jobOffer.SalaryCurrency}")<br/>

                @if (ShowHideButton)
                {
                    <div class="form-group pt-3 pb-1">
                        <label for="comments">Offer comments: (updates on show/hide offer)</label>
                        <InputTextArea id="offer-comments" @bind-Value="@_jobOffer.Comments" class="form-control"/>
                    </div>

                    if (_jobOffer.Hidden)
                    {
                        <button class="btn btn-primary" @onclick="ShowOffer">Show offer</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" @onclick="HideOffer">Hide offer</button>
                    }

                    <button class="btn btn-secondary ms-1" @onclick="CancelAsync">Cancel</button>
                }

                <h4 class="pt-5">Application record</h4>
                <EditForm Model="@_application">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div class="form-group">
                        <label for="appliedAt">Applied At:</label>
                        <InputDate id="appliedAt" @bind-Value="@_application!.AppliedAt" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="sentCv">Sent CV:</label>
                        <InputText id="sentCv" @bind-Value="@_application.SentCv" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="respondedAt">Responded At:</label>
                        <InputDate id="respondedAt" @bind-Value="@_application.RespondedAt" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="respondedAt">Status:</label>
                        <InputSelect id="status" @bind-Value="@_application.Status" class="form-control">
                            @foreach (var value in Enum.GetValues<ApplyStatus>()) {
                                <option value="@value">@value</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label for="comments">Comments:</label>
                        <InputTextArea id="comments" @bind-Value="@_application.Comments" class="form-control"/>
                    </div>

                    <div class="form-group pb-1">
                        <label for="expectedMonthSalary">Expected Month Salary:</label>
                        <InputNumber id="expectedMonthSalary" @bind-Value="@_application.ExpectedMonthSalary"
                                     class="form-control"/>
                    </div>

                    <button type="submit" class="btn btn-success" @onclick="SaveAsync">@(_isEdit ? "Update" : "Create")</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Cancel</button>
                </EditForm>

            </div>
            <div class="col-md-9">
                <strong>Description:</strong> <br />
                <span style="white-space: pre-line">
                    @_jobOffer.Description
                </span>
            </div>
        </div>
    </BodyTemplate>
</Modal>

@inject IDbContextFactory<JobsDbContext> DbContextFactory;
@code {
    private bool _isEdit = false;
    private Modal _modal = default!;
    private JobsDbContext _context = null!;
    private JobOffer _jobOffer = null!;
    private Application? _application;

    private bool _alreadyAppliedToCompany;
    private int _companyOffersCount;

    [Parameter] public bool ShowHideButton { get; set; }
    [Parameter] public Action? OnUpdate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _context = await DbContextFactory.CreateDbContextAsync();
    }

    public async Task ShowAsync(JobOffer jobOffer)
    {
        _jobOffer = jobOffer;
        _application = jobOffer.Application;
        _isEdit = jobOffer.Application is not null;
        _application ??= new Application
        {
            OfferUrl = _jobOffer.OfferUrl,
        };

        _alreadyAppliedToCompany = await _context.Companies
            .Where(c => c.Name == _jobOffer.CompanyName)
            .AnyAsync(c => c.JobOffers.Any(jo => jo.Application != null));

        _companyOffersCount = await _context.JobOffers
            .Where(jo => jo.CompanyName == _jobOffer.CompanyName)
            .CountAsync();


        await _modal.ShowAsync();
    }

    private async Task SaveAsync()
    {
        if (_application is null)
            throw new ArgumentNullException(nameof(_application));

        if (_isEdit)
            _context.Update(_application);
        else
            await _context.AddAsync(_application);

        await _context.SaveChangesAsync();

        await _modal.HideAsync();
        OnUpdate?.Invoke();
    }

    private async Task CancelAsync()
    {
        if (_application != null && _context.Entry(_application).State != EntityState.Detached)
        {
            _context.Entry(_application).State = EntityState.Detached;
        }

        await _modal.HideAsync();
    }

    private async Task HideOffer()
    {
        _jobOffer.Hidden = true;
        _context.Update(_jobOffer);
        await _context.SaveChangesAsync();
        await _modal.HideAsync();
        OnUpdate?.Invoke();
    }

    private async Task ShowOffer()
    {
        _jobOffer.Hidden = false;
        _context.Update(_jobOffer);
        await _context.SaveChangesAsync();
        OnUpdate?.Invoke();
    }

    public async ValueTask DisposeAsync() => await _context.DisposeAsync();
}
