@page "/"
@rendermode InteractiveServer
@using System.Web
@using JobScraper.Common.Extensions
@using JobScraper.Models
@using JobScraper.Persistence
@using JobScraper.Web.Components.Modals
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options

<PageTitle>Job offers</PageTitle>

<h1>Job offers</h1>

<div class="overflow-auto">
<QuickGrid @ref="@grid" Items="jobOffers" Pagination="@pagination" class="table small-padding-table">
    <TemplateColumn SortBy="@(GridSort<JobOffer>.ByAscending(p => p.Application == null))" Title="Apply">
        <ColumnOptions>
            <select @bind="@IsAppliedFilter" @onfocusout="SetQueryParams">
                <option value="">All</option>
                <option value="true">Applied</option>
                <option value="false">Non applied</option>
            </select>
        </ColumnOptions>
        <ChildContent>
            @if (context.Application is null) {
                <button class="btn btn-primary" @onclick="_ => _applicationOfferModal.ShowAsync(context)">Apply</button>
            } else {
                <button class="btn btn-secondary" @onclick="_ => _applicationOfferModal.ShowAsync(context)">Modify</button>
            }
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn SortBy="@(GridSort<JobOffer>.ByAscending(p => p.Hidden))" Title="Hide">
        <ColumnOptions>
            <select @bind="@IsHiddenFilter" @onfocusout="SetQueryParams">
                <option value="">All</option>
                <option value="true">Hidden</option>
                <option value="false">Visible</option>
            </select>
        </ColumnOptions>
        <ChildContent>
            @if (context.Hidden) {
                <button class="btn btn-secondary" @onclick="async _ => await ShowOffer(context)">Show</button>
            } else {
                <button class="btn btn-primary" @onclick="async _ => await HideOffer(context)">Hide</button>
            }
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn class="col-2" Property="@(p => p.Company.Name)" Sortable="true" Title="Company">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="CompanyFilter" @bind:event="oninput" @onchange="SetQueryParams"/>
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn class="col-3" Property="@(p => p.Title)" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="TitleFilter" @bind:event="oninput" @onchange="SetQueryParams"/>
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn class="" Property="@(p => p.SalaryMinMonth)" Title="Min" Sortable="true">
        <ColumnOptions>
            <input type="number" @bind="SalaryMinFilter" @bind:event="oninput" @onchange="SetQueryParams"/>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn class="" Property="@(p => p.SalaryMaxMonth)" Title="Max" Sortable="true">
        <ColumnOptions>
            <input type="number" @bind="SalaryMaxFilter" @bind:event="oninput" @onchange="SetQueryParams"/>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn class="" Property="@(p => p.SalaryCurrency)" Title="Cur." Sortable="true">
        <ColumnOptions>
            <select multiple @bind="@CurrencyFilter" @onfocusout="SetQueryParams">
                @foreach (var item in currencyOptions)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn class="col" Property="@(p => p.ScrapedAt)" Format="yyyy-MM-dd" Sortable="true"/>
    <PropertyColumn class="col text-nowrap" Property="@(p => p.UpdatedAt)" Format="yyyy-MM-dd HH:mm" Sortable="true"/>
    <PropertyColumn class="col-1" Property="@(p => string.Join(", ", p.MyKeywords))" Title="My keywords">
        <ColumnOptions>
            <select multiple @bind="@MyKeywordsFilter" @onfocusout="SetQueryParams">
                @foreach (var item in @myKeywordsOptions)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn class="col-1" Property="@(p => p.Comments)" Sortable="true"/>
    <PropertyColumn class="col-2" Property="@(p => p.Location)" Sortable="true"/>
    <PropertyColumn class="col-1" Property="@(p => p.Origin)" Sortable="true">
        <ColumnOptions>
            <select multiple @bind="@OriginFilter" @onfocusout="SetQueryParams">
                @foreach (var item in Enum.GetValues(typeof(DataOrigin)))
                {
                    <option value="@item">@item</option>
                }
            </select>
        </ColumnOptions>
    </PropertyColumn>
</QuickGrid>
</div>

@if (pagination.TotalItemCount is 0)
{
    <div class="d-flex justify-content-center align-items-center">
        <p>No visible offers found. Let's scrape some new :)</p>
    </div>
}

<ApplicationOfferModal @ref="_applicationOfferModal" ShowHideButton OnUpdate="@(() => grid.RefreshDataAsync())" />

<Paginator State="@pagination">
    <SummaryTemplate>
        <div class="d-flex justify-content-between align-items-center w-auto">
            <span class="pe-1">Page size:</span>
            <select @bind="pagination.ItemsPerPage">
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
            <span class="ps-5">Total: <strong>@pagination.TotalItemCount</strong></span>
        </div>
    </SummaryTemplate>
</Paginator>

@inject IDbContextFactory<JobsDbContext> DbFactory
@inject IOptions<ScraperConfig> ScraperConfig;
@inject NavigationManager NavigationManager

@code {
    QuickGrid<JobOffer> grid = null!;
    JobsDbContext context = null!;
    PaginationState pagination = new() { ItemsPerPage = 50 };
    ApplicationOfferModal _applicationOfferModal = null!;
    string[] myKeywordsOptions = [];
    string[] currencyOptions = [];

    [SupplyParameterFromQuery] [Parameter] public string? TitleFilter { get; set; } = "";
    [SupplyParameterFromQuery] [Parameter] public string? CompanyFilter { get; set; } = "";
    [SupplyParameterFromQuery] [Parameter] public string? IsAppliedFilter { get; set; } = "false";
    [SupplyParameterFromQuery] [Parameter] public string? IsHiddenFilter { get; set; } = "false";
    [SupplyParameterFromQuery] [Parameter] public int? SalaryMinFilter { get; set; }
    [SupplyParameterFromQuery] [Parameter] public int? SalaryMaxFilter { get; set; }
    [SupplyParameterFromQuery] [Parameter] public string[]? CurrencyFilter { get; set; } = [];
    [SupplyParameterFromQuery] [Parameter] public string[]? OriginFilter { get; set; } = [];
    [SupplyParameterFromQuery] [Parameter] public string[]? MyKeywordsFilter { get; set; } = [];

    IQueryable<JobOffer> jobOffers => context.JobOffers
        .Include(jo => jo.Company)
        .Include(jo => jo.Application)
        .Where(jo => jo.DetailsScrapeStatus == DetailsScrapeStatus.Scraped)
        .WhereIf(!string.IsNullOrEmpty(TitleFilter), jo => jo.Title.ToLower().Contains(TitleFilter!.ToLower()))
        .WhereIf(!string.IsNullOrEmpty(CompanyFilter), jo => jo.Company.Name.ToLower().Contains(CompanyFilter!.ToLower()))
        .WhereIf(OriginFilter?.Length     > 0, jo => OriginFilter!.Contains(jo.Origin.ToString()))
        .WhereIf(MyKeywordsFilter?.Length > 0, jo => jo.MyKeywords.Any(mk => MyKeywordsFilter!.Contains(mk)))
        .WhereIf(CurrencyFilter?.Length   > 0, jo => CurrencyFilter!.Contains(jo.SalaryCurrency))
        .WhereIf(IsAppliedFilter?.Length  > 0, jo => IsAppliedFilter == "true" ? jo.Application != null : jo.Application == null)
        .WhereIf(IsHiddenFilter?.Length   > 0, jo => IsHiddenFilter  == "true" ? jo.Hidden : !jo.Hidden)
        .WhereIf(SalaryMinFilter.HasValue, jo => jo.SalaryMinMonth >= SalaryMinFilter)
        .WhereIf(SalaryMaxFilter.HasValue, jo => jo.SalaryMaxMonth >= SalaryMaxFilter)
        .OrderBy(jo => jo.CompanyName)
        .ThenByDescending(jo => jo.SalaryMaxMonth);

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();
        myKeywordsOptions = ScraperConfig.Value.Keywords;
        currencyOptions = await context.JobOffers
            .Select(jo => jo.SalaryCurrency!)
            .Where(c => !string.IsNullOrEmpty(c))
            .Distinct()
            .ToArrayAsync();

        // set default filters if query params are not set
        IsAppliedFilter ??= "false";
        IsHiddenFilter ??= "false";
    }

    private void SetQueryParams()
    {
        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString("");

        if (TitleFilter?.Length > 0) query["TitleFilter"] = TitleFilter;
        if (CompanyFilter?.Length > 0) query["CompanyFilter"] = CompanyFilter;
        if (IsAppliedFilter?.Length > 0) query["IsAppliedFilter"] = IsAppliedFilter;
        if (IsHiddenFilter?.Length > 0) query["IsHiddenFilter"] = IsHiddenFilter;
        if (SalaryMinFilter.HasValue) query["SalaryMinFilter"] = SalaryMinFilter.ToString();
        if (SalaryMaxFilter.HasValue) query["SalaryMaxFilter"] = SalaryMaxFilter.ToString();

        for (var i = 0; i < CurrencyFilter?.Length; i++)
            query.Add("CurrencyFilter", CurrencyFilter![i]);

        for (var i = 0; i < OriginFilter?.Length; i++)
            query.Add("OriginFilter", OriginFilter![i]);

        for (var i = 0; i < MyKeywordsFilter?.Length; i++)
            query.Add("MyKeywordsFilter", MyKeywordsFilter![i]);

        uriBuilder.Query = query.ToString();

        NavigationManager.NavigateTo(uriBuilder.ToString(), forceLoad: false);
    }

    private async Task HideOffer(JobOffer jobOffer)
    {
        jobOffer.Hidden = true;
        await context.SaveChangesAsync();
        await grid.RefreshDataAsync();
    }

    private async Task ShowOffer(JobOffer jobOffer)
    {
        jobOffer.Hidden = false;
        await context.SaveChangesAsync();
        await grid.RefreshDataAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}