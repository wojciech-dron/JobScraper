@using BlazorBootstrap
@using JobScraper.Models
@using JobScraper.Persistence
@using Microsoft.EntityFrameworkCore

<Modal @ref="_modal" Title="@(_isEdit ? "Edit Application" : "Create Application")" Fullscreen="ModalFullscreen.Always">
    <BodyTemplate>
        <div class="row">
            <div class="col-md-3">
                <a href="@_jobOffer.OfferUrl" target="_blank">Offer page</a><br/>
                @if (!string.IsNullOrEmpty(_jobOffer.ApplyUrl))
                {
                    <a href="@_jobOffer.ApplyUrl" target="_blank">Apply page</a>
                    <br/>
                }
                <strong>Title:</strong> @_jobOffer.Title<br/>
                <strong>Company Name:</strong> @(_jobOffer.CompanyName ?? "Not specified")<br/>
                <strong>Location:</strong> @(_jobOffer.Location ?? "Not specified")<br/>
                <strong>Salary:</strong> @($"{_jobOffer.SalaryMinMonth} - {_jobOffer.SalaryMaxMonth} {_jobOffer.SalaryCurrency}")<br/>

                <EditForm Model="@_application">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div class="form-group">
                        <label for="appliedAt">Applied At:</label>
                        <InputDate id="appliedAt" @bind-Value="@_application!.AppliedAt" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="sentCv">Sent CV:</label>
                        <InputText id="sentCv" @bind-Value="@_application.SentCv" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="respondedAt">Responded At:</label>
                        <InputDate id="respondedAt" @bind-Value="@_application.RespondedAt" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="comments">Comments:</label>
                        <InputTextArea id="comments" @bind-Value="@_application.Comments" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="expectedMonthSalary">Expected Month Salary:</label>
                        <InputNumber id="expectedMonthSalary" @bind-Value="@_application.ExpectedMonthSalary"
                                     class="form-control"/>
                    </div>
                    <br/>

                    <button type="submit" class="btn btn-primary" @onclick="SaveAsync">@(_isEdit ? "Update" : "Create")</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Cancel</button>
                </EditForm>
            </div>
            <div class="col-md-9">
                <strong>Description:</strong> <br />
                <span style="white-space: pre-line">
                    @_jobOffer.Description
                </span>
            </div>
        </div>
    </BodyTemplate>
</Modal>

@inject IDbContextFactory<JobsDbContext> DbContextFactory;
@code {
    private bool _isEdit = false;
    private Modal _modal = default!;
    private JobsDbContext _context = null!;
    private JobOffer _jobOffer = null!;
    private Application? _application;

    protected override async Task OnInitializedAsync()
    {
        _context = await DbContextFactory.CreateDbContextAsync();
    }

    public async Task ShowAsync(JobOffer jobOffer)
    {
        _jobOffer = jobOffer;
        _application = jobOffer.Application;
        _isEdit = jobOffer.Application is not null;
        _application ??= new Application
        {
            OfferUrl = _jobOffer.OfferUrl
        };

        await _modal.ShowAsync();
    }

    private async Task SaveAsync()
    {
        if (_application is null)
            throw new ArgumentNullException(nameof(_application));

        if (_isEdit)
            _context.Update(_application);
        else
            await _context.AddAsync(_application);

        await _context.SaveChangesAsync();

        await _modal.HideAsync();
    }

    private async Task CancelAsync()
    {
        if (_application != null && _context.Entry(_application).State != EntityState.Detached)
        {
            _context.Entry(_application).State = EntityState.Detached;
        }

        await _modal.HideAsync();
    }

    public async ValueTask DisposeAsync() => await _context.DisposeAsync();
}
