@page "/scrape"
@using JobScraper.Models
@rendermode InteractiveServer
@inject IServiceProvider ServiceProvider
@inject ILogger<ScrapePage> Logger

<h2>Scraping</h2>

<div class="mt-5 d-flex flex-column">

    <button class="btn btn-primary mb-3" @onclick="StartScraping" disabled="@isScraping">
        @(isScraping ? "Scraping..." : "Start Scraping")
    </button>

    <span>
        Scrape pipeline is designed to skip already scraped jobs.
        You can retry with no worry :)
    </span>

    <br/>
    <p>@statusMessage</p>

</div>


<div class="d-flex flex-column mb-5">
    <h4>Configure providers</h4>

    @foreach (var provider in providers)
    {
        <div class="row mb-3">
            <div class="form-group col-md-2">
                <label for="DataOrigin">Origin:</label>
                <InputSelect id="DataOrigin" @bind-Value="@provider.DataOrigin" class="form-control">
                    @foreach (var value in DataOriginHelpers.Scrapable)
                    {
                        <option value="@value">@value</option>
                    }
                </InputSelect>
                @if (provider.DataOrigin.HasDetailsScraping())
                {
                    <span class="text-info" title="@detailsInfo">
                    Increases scraping time*
                </span>
                }
            </div>

            <div class="form-group col-md-9">
                <label for="SearchUrl">Search Url:</label>
                <InputText
                    id="SearchUrl"
                    class="form-control"
                    placeholder="Enter full search url"
                    @bind-Value="@provider.SearchUrl"
                    />
            </div>

            <div class="form-group col-md-1 d-flex flex-column">
                <label>Actions:</label>
                <button type="button" class="btn btn-secondary" @onclick="() => Remove(provider)">Remove</button>
            </div>


        </div>
    }

    <button type="button" class="btn btn-secondary mt-3" @onclick="AddProvider">Add provider</button>
</div>

<h4>Configure settings</h4>

@code
{
    private const string detailsInfo = "This origin requires additional details scraping for each offer, " +
        "that drastically increase scraping time.";

    private void AddProvider() => providers.Add(new());
    private void Remove(OriginConfigViewModel provider) => providers.Remove(provider);
}
