@page "/scrape"
@rendermode InteractiveServer
@using JobScraper.Models
@using PlaywrightExtraSharp.Models
@using Blazored.FluentValidation

<h2>Scraping</h2>

<EditForm Model="config">
    <FluentValidationValidator />

    <div class="row mb-5">
        <h4>Configure sources</h4>

        @foreach (var source in config.Sources)
        {
            <div class="form-group col-md-2">
                <label for="DataOrigin">Origin:</label>
                <InputSelect id="DataOrigin" @bind-Value="@source.DataOrigin" class="form-control">
                    @foreach (var value in DataOriginHelpers.Scrapable)
                    {
                        <option value="@value">@value</option>
                    }
                </InputSelect>
                @if (source.DataOrigin.HasDetailsScraping())
                {
                    <span class="text-info small" title="@originInfo">
                        Increases scraping time
                        <i class="bi bi-question-circle"></i>
                    </span>
                }
            </div>

            <div class="form-group col-md-8">
                <label for="SearchUrl">Search Url:</label>
                <InputText
                    id="SearchUrl"
                    class="form-control"
                    placeholder="Enter full search url"
                    @bind-Value="@source.SearchUrl"/>
            </div>

            <div class="form-group col-md-2 d-flex flex-column">
                <label>Actions:</label>
                <button class="btn btn-danger"
                        @onclick="() => config.Sources.Remove(source)">Remove</button>
            </div>
        }
        <button type="button"
                class="btn btn-secondary mt-3"
                @onclick="() => config.Sources.Add(new())">Add source</button>
    </div>

    <div class="row">
        <div class="col-md-6 d-flex flex-column mb-5">
            <h4>Keywords</h4>
            <label class="mb-1">Configured keywords will be highlighted in the Job offer list.</label>
            @foreach (var index in Enumerable.Range(0, config.Keywords.Count))
            {
                <div class="row mb-1">
                    <div class="col-md-9">
                        <InputText
                            class="form-control col-md-1"
                            placeholder="Eg. księgowość, programista, praca zdalna"
                            Value="@config.Keywords[index]"
                            ValueExpression="@(() => config.Keywords[index])"
                            ValueChanged="(v) => UpdateKeyword(index, v)"/>
                    </div>
                    <div class="col-md-3 d-flex flex-column">
                        <button class="btn btn-danger"
                                @onclick="() => config.Keywords.RemoveAt(index)">
                            Remove
                        </button>
                    </div>
                </div>
            }
            <button class="btn btn-secondary"
                    @onclick="() => config.Keywords.Add(string.Empty)">
                Add keyword
            </button>
        </div>

        <div class="col-md-6 mb-5">
            <h4>Scrape settings</h4>
            <div class="mb-1">
                <label for="BrowserType">Browser type:</label>
                <InputSelect id="BrowserType" @bind-Value="@config.BrowserType" class="form-control">
                    @foreach (var type in Enum.GetValues<BrowserTypeEnum>())
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-1">
                <label for="ShowBrowserWhenScraping">Show browser when scraping:</label>
                <InputSelect id="ShowBrowserWhenScraping" @bind-Value="@config.ShowBrowserWhenScraping" class="form-control">
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </InputSelect>
            </div>
        </div>
    </div>
    <ValidationSummary/>

    <div class="row">
        <div class="col-md-6 d-flex flex-column">
            <button class="btn btn-primary mb-3" @onclick="StartScraping" disabled="@isWorking">
                @(isWorking ? "Scraping..." : "Start Scraping")
            </button>
        </div>
        <div class="col-md-6 d-flex flex-column">
            <button class="btn btn-success mb-3" @onclick="SaveConfig" disabled="@isWorking">
                Save config
            </button>
        </div>
</div>
    <span>
        Scrape pipeline is designed to skip already scraped jobs.
        You can retry with no worry :)
    </span>
</EditForm>

<div class="mt-3">
    <h4>Status:</h4>
    @if (isWorking) {
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    }
    <p>@statusMessage</p>
</div>

@code
{
    private const string originInfo = "This origin requires additional details scraping for each offer, " +
        "that drastically increase scraping time.";

    private const string keywordsInfo = "Configured keywords will be highlighted in the Job offer list";

    private void UpdateKeyword(int index, string? newValue)
    {
        config.Keywords[index] = newValue ?? "";
        Console.WriteLine(string.Join(", ", config.Keywords));
    }
}
