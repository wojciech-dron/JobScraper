// <auto-generated />
using System;
using JobScraper.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobScraper.Migrations
{
    [DbContext(typeof(JobsDbContext))]
    [Migration("20250916184446_TickerQInitialCreate")]
    partial class TickerQInitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("JobScraper.Models.Application", b =>
                {
                    b.Property<string>("OfferUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExpectedMonthSalary")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SentCv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("OfferUrl");

                    b.HasIndex("AppliedAt");

                    b.HasIndex("ExpectedMonthSalary");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("JobScraper.Models.Company", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(30000)
                        .HasColumnType("TEXT");

                    b.Property<string>("IndeedUrl")
                        .HasMaxLength(1023)
                        .HasColumnType("TEXT");

                    b.Property<string>("JjitUrl")
                        .HasMaxLength(1023)
                        .HasColumnType("TEXT");

                    b.Property<string>("NoFluffJobsUrl")
                        .HasMaxLength(1023)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ScrapedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("JobScraper.Models.JobOffer", b =>
                {
                    b.Property<string>("OfferUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("AgeInfo")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplyUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DetailsScrapeStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("ToScrape");

                    b.Property<int>("HideStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HtmlPath")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("MyKeywords")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("OfferKeywords")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Origin")
                        .HasMaxLength(24)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SalaryCurrency")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalaryMaxMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SalaryMinMonth")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScrapedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScreenShotPath")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("OfferUrl");

                    b.HasIndex("AgeInfo");

                    b.HasIndex("CompanyName");

                    b.HasIndex("DetailsScrapeStatus");

                    b.HasIndex("HideStatus");

                    b.HasIndex("Location");

                    b.HasIndex("SalaryCurrency");

                    b.HasIndex("SalaryMaxMonth");

                    b.HasIndex("SalaryMinMonth");

                    b.HasIndex("ScrapedAt");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("JobOffers", (string)null);
                });

            modelBuilder.Entity("JobScraper.Models.ScraperConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("AvoidKeywords")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BrowserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("MyKeywords")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SavePages")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SaveScreenshots")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowBrowserWhenScraping")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StarMyKeywords")
                        .HasColumnType("INTEGER");

                    b.Property<float>("WaitForDetailsSeconds")
                        .HasColumnType("REAL");

                    b.Property<float>("WaitForListSeconds")
                        .HasColumnType("REAL");

                    b.Property<float>("WaitForScrollSeconds")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ScraperConfigs", (string)null);
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.CronTickerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Expression")
                        .HasColumnType("TEXT");

                    b.Property<string>("Function")
                        .HasColumnType("TEXT");

                    b.Property<string>("InitIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Request")
                        .HasColumnType("BLOB");

                    b.Property<int>("Retries")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("RetryIntervals")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Expression")
                        .HasDatabaseName("IX_CronTickers_Expression");

                    b.ToTable("CronTickers", "jobs");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.CronTickerOccurrenceEntity<TickerQ.EntityFrameworkCore.Entities.CronTickerEntity>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CronTickerId")
                        .HasColumnType("TEXT");

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LockHolder")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CronTickerId")
                        .HasDatabaseName("IX_CronTickerOccurrence_CronTickerId");

                    b.HasIndex("ExecutionTime")
                        .HasDatabaseName("IX_CronTickerOccurrence_ExecutionTime");

                    b.HasIndex("CronTickerId", "ExecutionTime")
                        .IsUnique()
                        .HasDatabaseName("UQ_CronTickerId_ExecutionTime");

                    b.HasIndex("Status", "ExecutionTime")
                        .HasDatabaseName("IX_CronTickerOccurrence_Status_ExecutionTime");

                    b.ToTable("CronTickerOccurrences", "jobs");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.TimeTickerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BatchParent")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BatchRunCondition")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Function")
                        .HasColumnType("TEXT");

                    b.Property<string>("InitIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("LockHolder")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Request")
                        .HasColumnType("BLOB");

                    b.Property<int>("Retries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("RetryIntervals")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BatchParent");

                    b.HasIndex("ExecutionTime")
                        .HasDatabaseName("IX_TimeTicker_ExecutionTime");

                    b.HasIndex("Status", "ExecutionTime")
                        .HasDatabaseName("IX_TimeTicker_Status_ExecutionTime");

                    b.ToTable("TimeTickers", "jobs");
                });

            modelBuilder.Entity("JobScraper.Models.Application", b =>
                {
                    b.HasOne("JobScraper.Models.JobOffer", "JobOffer")
                        .WithOne("Application")
                        .HasForeignKey("JobScraper.Models.Application", "OfferUrl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobOffer");
                });

            modelBuilder.Entity("JobScraper.Models.JobOffer", b =>
                {
                    b.HasOne("JobScraper.Models.Company", "Company")
                        .WithMany("JobOffers")
                        .HasForeignKey("CompanyName");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobScraper.Models.ScraperConfig", b =>
                {
                    b.OwnsMany("JobScraper.Models.SourceConfig", "Sources", b1 =>
                        {
                            b1.Property<int>("ScraperConfigId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DataOrigin")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Disabled")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("SearchUrl")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ScraperConfigId", "__synthesizedOrdinal");

                            b1.ToTable("ScraperConfigs");

                            b1.ToJson("SourcesJson");

                            b1.WithOwner()
                                .HasForeignKey("ScraperConfigId");
                        });

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.CronTickerOccurrenceEntity<TickerQ.EntityFrameworkCore.Entities.CronTickerEntity>", b =>
                {
                    b.HasOne("TickerQ.EntityFrameworkCore.Entities.CronTickerEntity", "CronTicker")
                        .WithMany()
                        .HasForeignKey("CronTickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CronTicker");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.TimeTickerEntity", b =>
                {
                    b.HasOne("TickerQ.EntityFrameworkCore.Entities.TimeTickerEntity", "ParentJob")
                        .WithMany("ChildJobs")
                        .HasForeignKey("BatchParent")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentJob");
                });

            modelBuilder.Entity("JobScraper.Models.Company", b =>
                {
                    b.Navigation("JobOffers");
                });

            modelBuilder.Entity("JobScraper.Models.JobOffer", b =>
                {
                    b.Navigation("Application");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.TimeTickerEntity", b =>
                {
                    b.Navigation("ChildJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
